generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Community {
  id   Int    @id @default(autoincrement())
  cuid String @unique @default(cuid())

  name        String
  description String
  picture     String?
  members     User[]

  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @updatedAt

  @@map("communities")
}



model User {
  userId              Int                    @id @default(autoincrement())
  cuid          String  @unique @default(cuid())
  memberId            Int?
  isAdmin             Boolean                @default(false)
  firstName           String?
  lastName            String?
  nameOtherLang       String?
  gender              String?
  careerGoal          String?
  careerGoalEng       String?
  graduationYear      Int?
  email               String?                @unique
  wechatId            String?
  interests           String?
  interestsEng        String?
  hometown            String?
  hometownEng         String?
  linkedInLink        String?
  instagramLink       String?
  twitterLink         String?
  xiaohongshuID       String?
  major               String?
  majorEng            String?
  school              String?
  profilePictureURL   String?
  phone              String?
  bio                 String?
  botSummary          String?                @default("")
  joinedDate          DateTime?
  bioEmbedding        Unsupported("vector")?
  interestEmbedding   Unsupported("vector")?
  careerGoalEmbedding Unsupported("vector")?
  currentCity         String?
  isOnboarded         Boolean                @default(false)
  personalTags        String[]
  professionalTags    String[]
  currentCompany      String?
  currentRole         String?
  communities         Community[]
  activities          Activity[]
  hangouts            Hangout[]
  chats               Chat[]
  userDetail          UserDetail?
  userInfoPoint       UserInfoPoint[]
  userSummary         UserSummary[]
  initiatedConnections    Connection[]          @relation("initiator")
  receivedConnections    Connection[]          @relation("receiver")
  saveInitiatorUser     UserSave[]             @relation("saves")
  saveReceiverUser      UserSave[]             @relation("saved by")

  @@map("users")
}


enum ConnectionStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
}

model Connection {
  id        Int      @id @default(autoincrement())
  initiatorUserId Int
  receiverUserId  Int
  initiatorMessage String?
  status   ConnectionStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  initiatorUser      User     @relation("initiator", fields: [initiatorUserId], references: [userId], onDelete: Cascade)
  receiverUser    User     @relation("receiver", fields: [receiverUserId], references: [userId], onDelete: Cascade)

  @@map("connections")
}

model UserSave {
  id        Int      @id @default(autoincrement())
  saveInitiatorUserId    Int
  saveReceiverUserId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  saveInitiatorUser      User     @relation("saves", fields: [saveInitiatorUserId], references: [userId], onDelete: Cascade)
  saveReceiverUser User     @relation("saved by", fields: [saveReceiverUserId], references: [userId], onDelete: Cascade)

  @@map("user_saves")

}

model UserDetail {
  id                            Int                    @id @default(autoincrement())
  userId                        Int                    @unique
  selfDescription               String[]
  pastExperience                String[]
  interestsAndPassions          String[]
  goalsAndDreams                String[]
  currentStatus                 String[]
  valueAndBelief                String[]
  additional                    String[]
  createdAt                     DateTime               @default(now())
  selfDescriptionEmbedding      Unsupported("vector")?
  pastExperienceEmbedding       Unsupported("vector")?
  interestsAndPassionsEmbedding Unsupported("vector")?
  goalsAndDreamsEmbedding       Unsupported("vector")?
  currentStatusEmbedding        Unsupported("vector")?
  valueAndBeliefEmbedding       Unsupported("vector")?
  additionalEmbedding           Unsupported("vector")?
  user                          User                   @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("user_details")
}

model UserSummary {
  id        Int      @id @default(autoincrement())
  cuid      String   @unique @default(cuid())
  userId    Int
  summary   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("user_summaries")
}

model UserInfoPoint {
  id             Int                  @id @default(autoincrement())
  userId         Int
  question       String
  answer         String
  keyWords       String[]
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  relevantURL    String?
  published      Boolean              @default(false)
  relevantImages UserInfoPointImage[]
  user           User                 @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("user_info_points")
}

model Chat {
  id             Int          @id @default(autoincrement())
  nanoId         String       @unique
  userId         Int
  title          String       @default("New chat")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  receiverUserId Int?
  type           ChatType     @default(SELF_AGENT)
  messages       Message[]
  chatMemory     ChatMemory[]
  user           User         @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("chats")
}

model ChatMemory {
  id        Int      @id @default(autoincrement())
  chatId    Int
  createdAt DateTime @default(now())
  skip      Int
  summary   String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@map("chat_memories")
}

model Message {
  id            Int      @id @default(autoincrement())
  chatId        Int
  role          String
  content       String
  name          String?
  function_call Json?
  createdAt     DateTime @default(now())
  chat          Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

model Hangout {
  id            Int      @id @default(autoincrement())
  cuid          String   @unique @default(cuid())
  communityId  Int
  activityId    Int
  activity    Activity @relation(fields: [activityId], references: [id])
  hostId        Int
  host         User?    @relation(fields: [hostId], references: [userId])
  messageFromHost String?
  createdAt     DateTime @default(now())
}

model Activity {
  id                Int                    @id @default(autoincrement())
  cuid              String                 @unique @default(cuid())
  title             String
  category          String?
  description       String?
  address           String?
  coverPhoto        String
  photos            String[]
  highlights        String[]
  tags              String[]
  isTimeSensitive   Boolean                @default(false)
  createdDate       DateTime               @default(now())
  lastUpdateDate    DateTime               @updatedAt
  activityEmbedding Unsupported("vector")?
  creatorId         Int?
  startDateTime              DateTime?
  endDateTime                DateTime?
  url               String?
  creator           User?                  @relation(fields: [creatorId], references: [userId])
  hangouts          Hangout[]

  @@map("activities")
}

model UserInfoPointImage {
  id              Int           @id @default(autoincrement())
  cuid            String        @unique @default(cuid())
  url             String
  caption         String?
  userInfoPointId Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  userInfoPoints  UserInfoPoint @relation(fields: [userInfoPointId], references: [id])

  @@map("images")
}

enum ChatType {
  SELF_AGENT
  OTHERS_AGENT
}
